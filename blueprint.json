{
  "schema": {
    "type": "app_blueprint",
    "version": {
      "major": 0,
      "minor": 1
    },
    "origin": "Engines Developer Studio 0.2"
  },
  "metadata": {
    "blueprint": {
      "version": {
        "major": 0,
        "minor": 1,
        "level": "alpha",
        "patch": 0
      }
    },
    "software": {
      "display": {
        "title": "Ipython base for DH",
        "description": "IPython provides a rich architecture for interactive computing with",
        "url": "http://ipython.org/"
      },
      "license": {
        "label": "BSD 3 Clause",
        "url": "http://opensource.org/licenses/BSD-3-Clause"
      }
    },
    "timestamp": "2019-04-10T15:21:01+10:00"
  },
  "software": {
    "base": {
      "name": "ipjn",
      "framework": "python3.7",
      "deployment_type": "web",
      "http_protocol": "https_and_http",
      "framework_port_override": 8888,
      "memory": {
        "required": 2048,
        "recommended": 6144
      }
    },
    "scripts": {
      "start": {
        "content": "#!/bin/sh\r\n\r\n\r\nPATH=$PATH:/home/app/.local/bin/\r\nexport PATH\r\n\r\nif test -f /home/engines/templates/app/core_modules\r\n   then\r\n    cp /home/engines/templates/app/core_modules  /home/app/core_modules \r\nfi\r\n\r\n\r\nif ! test -f /home/app/.have_profile\r\n then\r\n  /home/engines/scripts/actionators/update_core_modules.sh\r\n  mkdir /home/app/notebook\r\n  cd /home/app/notebook\r\n  ipython3 profile create nbserver\r\n  jupyter notebook --generate-config\r\n  touch /home/app/.have_profile\r\n  ls -la /home/app_src/ /home/app\r\nfi\r\n\r\nPID_FILE=/tmp/ipython_notebook.pid\r\nexport PID_FILE\r\n. /home/engines/functions/system_functions.sh\r\nhost=`hostname`\r\nip=`grep $Hostname /etc/hosts |cut -f1 `\r\ncd /home/app/notebook\r\n#result=`jupyter-notebook   --ip=$ip $pass &`\r\nresult=`jupyter-notebook  --no-browser --ip=$ip  --config ~/.jupyter/jupyter_notebook_config.py`\r\npid=$!\r\n\r\necho $result\r\n\r\necho $result |grep token= > /tmp/first_run_url\r\n\r\necho $pid >$PID_FILE\r\nstartup_complete\r\nwait\r\nkill -HUP $pid\r\nshutdown_complete\r\n\r\nexit\r\n"
      }
    },
    "system_packages": [
      {
        "package": "python3.7"
      },
      {
        "package": "python-matplotlib"
      },
      {
        "package": "poppler-utils"
      },
      {
        "package": "libxml2"
      },
      {
        "package": "libxslt1.1"
      },
      {
        "package": "python3.7-dev"
      }
    ],
    "service_configurations": [
      {
        "publisher_namespace": "EnginesSystem",
        "type_path": "filesystem/local/filesystem",
        "variables": {
          "service_name": "notebook",
          "volume_src": "",
          "engine_path": "",
          "permissions": "rw",
          "user": "_Engines_Builder(data_uid)",
          "group": "_Engines_Builder(data_gid)"
        }
      },
      {
        "publisher_namespace": "EnginesSystem",
        "type_path": "database/sql/mysql",
        "variables": {
          "database_name": "_Engines_Builder(engine_name)",
          "database_host": "_Engines_System(mysql_host)",
          "db_username": "_Engines_Builder(engine_name)",
          "db_password": "_Engines_System(random(10))",
          "collation": "utf8_general_ci",
          "full_access": "false"
        }
      },
      {
        "publisher_namespace": "EnginesSystem",
        "type_path": "filesystem/local/filesystem",
        "variables": {
          "service_name": "config",
          "volume_src": "",
          "engine_path": "",
          "permissions": "rw",
          "user": "_Engines_Builder(data_uid)",
          "group": "_Engines_Builder(data_gid)"
        }
      }
    ],
    "environment_variables": [
      {
        "name": "Modules",
        "input": {
          "type": "text",
          "label": "python modules to install seperated by a space"
        }
      },
      {
        "name": "HOME",
        "value": "/home/app",
        "immutable": true,
        "input": {
          "type": "hidden"
        }
      }
    ],
    "template_files": [
      {
        "path": "/home/app/core_modules",
        "language": "sh",
        "content": " setuptools\r\n jsonschema \r\n ipython\r\n jupyter\r\n tornado==4.5.3\r\n https://download.pytorch.org/whl/cpu/torch-1.0.1.post2-cp37-cp37m-linux_x86_64.whl\r\n torchvision\r\n flair\r\n diff-pdf-visually"
      }
    ],
    "persistent_directories": [
      {
        "path": "/home/app/notebook",
        "volume_name": "notebook"
      }
    ],
    "actionators": [
      {
        "name": "install_module",
        "return_type": "plain_text",
        "variables": [
          {
            "name": "module",
            "mandatory": true,
            "input": {
              "type": "string"
            }
          }
        ],
        "script": {
          "language": "sh",
          "content": "#!/bin/sh\r\n. /home/app/venv/bin/activate\r\npython3.7 -m pip install --upgrade  $module \r\n if test $? -eq 0\r\n then\r\n    echo  $module > /home/fs/config/user_modules\r\n else\r\n  echo \"Failed to install $module \"\r\n fi"
        }
      },
      {
        "name": "set_password",
        "return_type": "none",
        "variables": [
          {
            "name": "notebook_password",
            "input": {
              "type": "password_with_confirmation"
            }
          }
        ],
        "script": {
          "content": "#!/bin/sh\r\n\r\n. /home/app/venv/bin/activate\r\n\r\n  pass=`echo \"from IPython.lib import passwd\r\n  passwd('$notebook_password')\r\n  exit() \" | ipython3  --no-confirm-exit --no-color-info --no-pprint --colors=NoColor |grep sha1 | sed \"/.*sha/s//\\'sha/\"`\r\n  cat ~/.ipython/jupyter/jupyter_notebook_config.py | sed \"/^# c.NotebookApp.password.*/s//c.NotebookApp.password=$pass/\" > /tmp/confg\r\n  cp /tmp/confg ~/.ipython/jupyter/jupyter_notebook_config.py\r\n  echo -n $pass > /home/fs/config/.pass\r\n  echo -n $notebook_password > /home/fs/config/.notebook_password"
        }
      },
      {
        "name": "show_token",
        "return_type": "plain_text",
        "script": {
          "content": "#!/bin/sh\r\n. /home/app/venv/bin/activate\r\n \r\njupyter notebook list | cut -f2 -d= |awk '{print $1}'\r\n"
        }
      },
      {
        "name": "update_core_modules",
        "return_type": "plain_text",
        "script": {
          "language": "sh",
          "content": "#!/bin/sh\r\n\r\n. /home/app/venv/bin/activate\r\n \r\npython3.7 -m pip install --upgrade pip \r\n\r\nif test -f /home/app/core_modules\r\n then\r\n   for module in `cat /home/app/core_modules`\r\n    do\r\n     echo Updating $module \r\n      python3.7 -m pip  install --upgrade  $module\r\n    done\r\nfi\r\n\r\n"
        }
      },
      {
        "name": "list_core_modules",
        "return_type": "plain_text",
        "script": {
          "language": "sh",
          "content": "#!/bin/sh\r\n\r\ncat /home/app/core_modules"
        }
      },
      {
        "name": "update_user_modules",
        "return_type": "plain_text",
        "script": {
          "content": "#!/bin/sh\r\n\r\n\r\n. /home/app/venv/bin/activate\r\n  \r\n     if test -f /home/fs/config/user_modules\r\n      then\r\n       for module in `cat /home/fs/config//user_modules`\r\n        do\r\n         echo Updating $module \r\n          python3.7 -m pip  install --upgrade  $module\r\n        done\r\n     fi\r\n"
        }
      },
      {
        "name": "list_user_modules",
        "return_type": "plain_text",
        "script": {
          "language": "sh",
          "content": "#!/bin/sh\r\n\r\nPATH=$PATH:/home/app/.local/bin/\r\nexport PATH\r\n\r\n\r\n  \r\n     if test -f /home/app/user_modules\r\n      then\r\n       cat home/a/pp/user_modules\r\n     else\r\n      echo 'No modules'\r\n     fi"
        }
      },
      {
        "name": "rm_module",
        "return_type": "plain_text",
        "variables": [
          {
            "name": "module",
            "input": {
              "type": "string",
              "label": "Module Name"
            }
          }
        ],
        "script": {
          "language": "sh",
          "content": "#!/bin/sh \r\n \r\n. /home/app/venv/bin/activate\r\n if test -f /home/app/user_modules\r\n      then\r\n      cat  /home/fs/config/user_modules | grep -v \"$module\" >  /home/fs/config/user_modules.new\r\n      python3.7 -m pip  uninstall   $module \r\n       if test $? -eq 0\r\n       then\r\n        mv /home/fs/config/user_modules.new /home/fs/config//user_modules \r\n      else\r\n       echo failed to remove $module\r\n      fi\r\n    else\r\n     echo no User Modules\r\n fi\r\n \r\n"
        }
      }
    ]
  }
}
